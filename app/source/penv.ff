$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK NULL
  Exercise environment variable routines

   penv (1)                          - print all or part of environment in formats readable by various shells
   SET 
      o system_putenv (3)            - set environment variable from Fortran by calling putenv(3c)
----> o set_environment_variable (3) - call setenv(3c) to set environment variable
   GET 
      o get_environment_variable (3) - fortran intrinsic for reading an environment variable

      o system_initenv (3)           - initialize environment table pointer and size to it can be read by readenv(3f)
      o system_readenv (3)           - step thru and read environment table
   REMOVE 
      o system_unsetenv (3)          - change or add an environment variable by calling unsetenv(3c)
      o system_clearenv (3)          - clear environment

   Make it do this too ...
      Support command to execute in environment. After -- rest is command and/or --cmd 'command'

      Allow for quoted strings so can set variables (if NAME= instead of NAME variable is set instead of displayed)

      penv PATH=$PATH HOME=$HOME -clear -cmd bash

    COMMAND ENVIRONMENT: penv [variable...] [--unset] [--clear] [--cmd COMMAND]

    VARIABLE SELECTION

       variable(s)=VALUE(s)  If variable names are given they must be followed
                             by  a value, and they will be set before the 
			     command is specified.
       --clear         clear the environment before starting to set variables and
                       executing command
       --unset NAME(s) unset the specifically named variables
       --cmd COMMAND   process this command in the temporary environment created

$BLOCK
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK HELP -file penv.1.man
NAME
       penv(1f) - [M_system:ENVIRONMENT] print all or part of environment
                  in formats readable by various shells
       (LICENSE:PD)
SYNOPSIS
    penv [variable...] [ -C| -B| -v] 

    penv [ --help| --version]
DESCRIPTION
    If no arguments are given, penv(1f) prints the entire environment.
    If one or more variable names are given, it prints the value of
    each one that is set, and nothing for each one that is not set.

OPTIONS
    OUTPUT FORMAT
       -C           print output in a form that can be sourced into a
                    C shell (eg. as a setenv(1) command).

       -B           print output in a form that can be sourced into a
                    Bourne shell.

       -v           values only. Do not print variable names

       variable(s)  if variable names are given, print the value for
                    each one that is set. If quoted may include basic
		    globbing where "*" represents any string and "?"
		    represents any single character. The expression must
		    must represent the entire string.
                    
    INFORMATION
       --help       display this help and exit
       --version    output version information and exit

USAGE
     Example commands:

      penv           # print entire environment
      penv 'PREFIX*' # print environment variables beginning with PREFIX
      penv HOME TMP LOGNAME USER # print selected variables

      # csh(1)/tcsh(1) example:
        % penv -C > readme.csh
        % source readme.csh
      # sh(1)/bash(1)/zsh(1) ... example:
        $ penv -B > readme.sh
        $ . readme.sh
      # print specified variable names
        % penv TMP TEMPDIR TMPDIR TEMP
      # print variables starting with A or H
        % penv 'A*' 'H*'
      # print variables containing LIBRARY
        % penv '*LIBRARY*' 

EXIT STATUS
       The exit status is:

        0  if all variables specified were found
        1  otherwise
SEE ALSO
       env(1), printenv(1)
AUTHOR
   John S. Urban
LICENSE
   Public Domain
$BLOCK END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK VERSION
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        penv(1f)
DESCRIPTION:    Print values from the environment table
VERSION:        1.0 2016-11-27
AUTHOR:         John S. Urban
REPORTING BUGS: http://www.urbanjost.altervista.org/
HOME PAGE:      http://www.urbanjost.altervista.org/index.html
COPYRIGHT:      Copyright (C) 2016 John S. Urban. Public Domain
$BLOCK END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
program penv
use M_kracken, only : kracken, lget, sget, sgets, IPvalue
use M_system, only : system_initenv, system_readenv, system_unsetenv, system_putenv
use M_system, only : system_clearenv
use M_strings, only : glob
implicit none
character(len=:),allocatable       :: string
logical                            :: Csyntax, Bsyntax, printedsome, valuesonly, missing=.false.
integer                            :: i, ii, ilength, istatus, ierr
character(len=IPvalue),allocatable :: names(:)    ! assuming names not greater than this length
character(len=:),allocatable       :: avalue
integer                            :: cstat
character(len=256)                 :: sstat
!-----------------------------------------------------------------------------------------------------------------------------------
   call kracken('penv',' -v .F. -C .F. -B .F. -help .F. -version .F. &
   & -unset -clear .F. -cmd                                            ')    ! crack command line arguments
   call help_usage(lget('penv_help'))                                        ! display help if -help specified and stop
   call help_version(lget('penv_version'))                                   ! display version if -version specified and stop
   Csyntax=lget('penv_C')                                                    ! if -C specified write output for csh(1)
   Bsyntax=lget('penv_B')                                                    ! if -B specified write output for sh(1)
   valuesonly=lget('penv_v')                                                 ! if -v set flag to print values only

   printedsome=.false.                                                       ! flag if nothing else printed to print all values
!-----------------------------------------------------------------------------------------------------------------------------------
   if(lget('penv_clear'))then
      call system_clearenv()
   endif
!-----------------------------------------------------------------------------------------------------------------------------------
   names=sgets('penv_oo')                                                    ! get list of individual names (assumed no spaces)
   if(size(names).ne.0)then                                                  ! print variables specified by name
      printedsome=.true.                                                     ! flag tried to print something
      do i=1,size(names)                                                     ! step thru names
         if((index(names(i),'*').ne.0 .or. index(names(i),'?').ne.0) .and. index(names(i),'=').eq.0 )then
	    ! print variable names with wildcards
            call system_initenv()
            do
	       string=system_readenv()
               if(string.eq.'') exit
               if(glob(string,trim(names(i))))then
                  call printformatted()
               endif
            enddo
         elseif(index(names(i),'=').eq.0)then
	    ! print variable names without wildcards
            call get_environment_variable(name=trim(names(i)),length=ilength,status=istatus)
            select case(istatus)
             case(0)                                                         ! variable is defined
               if(ilength.eq.0)then                                          ! value= apparently cannot have zero length
                  avalue=''
               else
                  allocate(character(len=ilength) :: avalue)                      ! make long enough to hold value
                  call get_environment_variable(name=trim(names(i)),value=avalue) ! get environment variable value by name
               endif
             case(-1)                                                        ! blank value
               avalue=' '
             case(1)                                                         ! name not found
               missing=.true.
               cycle
             case(2)                                                         ! environment variables not supported
               cycle
             case default                                                    ! unknown error
               cycle
            end select
            string=trim(names(i))//'='//avalue(:ilength)                     ! build string to same format system_readenv(3f) gets
            deallocate(avalue)                                               ! release scratch space
            call printformatted()                                            ! print input of form 'NAME=VALUE' as specified
         else                                                                ! if contains = assumes this is an assignment
	    ! has equal sign so assume setting a value
            call system_putenv(trim(names(i)))
         endif
      enddo
   endif
!-----------------------------------------------------------------------------------------------------------------------------------
   names=sgets('penv_unset')                                                 ! get list of individual names (assumed no spaces)
   do i=1,size(names)                                                        ! step thru names and unset them
      call system_unsetenv(names(i),ierr)
   enddo
!-----------------------------------------------------------------------------------------------------------------------------------
   string=sget('penv_cmd')
   if(string.eq.' ')then
      if(.not.printedsome)then                                               ! did not print specific values so print entire table
         call system_initenv()                                               ! set to beginning of table
         do                                                                  ! iterate through environment table
            string=system_readenv()
            if(string.eq.'')exit                                             ! if a blank line is returned assume end reached
            call printformatted()                                            ! print variable
         enddo
      endif
   else
      call execute_command_line(trim(string),cmdstat=cstat,cmdmsg=sstat)
   endif
   if(missing)then                                                           ! a specifically named variable was not found
      stop 1                                                                 ! return non-zero system exit status if supported
   endif
!-----------------------------------------------------------------------------------------------------------------------------------
contains
!-----------------------------------------------------------------------------------------------------------------------------------
subroutine printformatted()
   if(Bsyntax)then
      ii=index(string,'=')
      if(.not.valuesonly)write(*,'("export ''",a,"''=")',advance='no')string(1:ii-1)
      write(*,'(a)')printquoted_SH(string(ii+1:))
   elseif(Csyntax)then
      ii=index(string,'=')
      if(.not.valuesonly)write(*,'("setenv ",a)',advance='no')printquoted_CSH(string(1:ii-1))
      write(*,'(1x,a)')printquoted_CSH(string(ii+1:))
   else
      if(valuesonly)then
         ii=index(string,'=')
         write(*,'(a)')trim(string(ii+1:))
      else
         write(*,'(a)')trim(string)
      endif
   endif
end subroutine printformatted
!-----------------------------------------------------------------------------------------------------------------------------------
function printquoted_SH(string) result (quoted)
! print variable names and variable values with quotes and special escaping of ' for sh(1) shell
character(len=*),intent(in)    :: string
character(len=:),allocatable   :: quoted
integer                        :: i
character                      :: c
   quoted="'"
   do i=1,len(string)
      c=string(i:i)
      select case(c)
       case ("'")
         quoted=quoted//"'\''"
       case default
         quoted=quoted//c
      end select
   enddo
   quoted=quoted//"'"
end function printquoted_SH
!-----------------------------------------------------------------------------------------------------------------------------------
function printquoted_CSH(string) result (quoted)
! print variable names and variable values with quotes and special escaping of ' and ! for csh(1) shell
character(len=*),intent(in)    :: string
character(len=:),allocatable   :: quoted
integer                        :: i
character                      :: c
   quoted="'"
   do i=1,len(string)
      c=string(i:i)
      select case(c)
       case ("'")
         quoted=quoted//"'\''"
       case ('!')
         quoted=quoted//"\!"
       case default
         quoted=quoted//c
      end select
   enddo
   quoted=quoted//"'"
end function printquoted_CSH
!-----------------------------------------------------------------------------------------------------------------------------------
end program penv
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK NULL
From The Open Group:

   These strings have the form name=value; names shall not contain the
   character '='. For values to be portable across systems conforming to
   IEEE Std 1003.1-2001, the value shall be composed of characters from
   the portable character set (except NUL and as indicated below).

So names may contain any character except = and NUL, but:

   Environment variable names used by the utilities in the Shell and
   Utilities volume of IEEE Std 1003.1-2001 consist solely of uppercase
   letters, digits, and the '_' (underscore) from the characters defined in
   Portable Character Set and do not begin with a digit. Other characters
   may be permitted by an implementation; applications shall tolerate the
   presence of such names.

So while the names may be valid, your shell might not support anything
besides letters, numbers, and underscores.

VALUES also cannot have NUL?

$BLOCK
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
